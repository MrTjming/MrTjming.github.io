<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>网络开发系列--WSGI</title>
      <link href="/2020/03/30/NetworkDev-WSGI/"/>
      <url>/2020/03/30/NetworkDev-WSGI/</url>
      
        <content type="html"><![CDATA[<h1 id="网络开发系列–WSGI"><a href="#网络开发系列–WSGI" class="headerlink" title="网络开发系列–WSGI"></a>网络开发系列–WSGI</h1><h2 id="WSGI"><a href="#WSGI" class="headerlink" title="WSGI"></a>WSGI</h2><p>WSGI (Web Server Gateway Interface) Python定义的Web服务器与Web框架之间的标准.</p><p>WSGI接口定义要求开发者(通过web框架)实现一个函数application</p><p><code>def application(environ, start_response)</code></p><p>该函数接收两个参数</p><ul><li>environ 一个包含一个HTTP request的所有请求信息的dict</li><li>start_response 一个发送http响应的函数</li></ul><p>web服务器产生的响应头通过调用start_response 函数返回,响应内容则通过application函数自身返回</p><p>例如: <code>start_response(&#39;200 OK&#39;, [(&#39;Content-Type&#39;, &#39;text/html&#39;)])</code></p><h3 id="WSGI作用"><a href="#WSGI作用" class="headerlink" title="WSGI作用"></a>WSGI作用</h3><p>通过WSGI,web开发者可以专注于对客户端发出的request的内容进行处理,并产生响应的响应</p><p>而解析HTTP中的request和返回response等工作则由WSGI自动完成</p><h3 id="WSGI实现原理"><a href="#WSGI实现原理" class="headerlink" title="WSGI实现原理"></a>WSGI实现原理</h3><ol><li><p>创建socket监听端口</p></li><li><p>调用socket的accept()接收来自客户端的请求.(在HTTP2之前,HTTP传输是字符明文传输的)</p></li><li>对接收到的请求的字符串进行预处理<ol><li>将请求方式,版本,请求头,请求内容等信息解析出来,并放入environ 中</li></ol></li><li>调用web开发者的application函数,将environ和start_response,由开发者来处理请求</li><li>将application的返回值封装进response里,返回给客户端</li></ol><h3 id="实现一个简易的WSGI"><a href="#实现一个简易的WSGI" class="headerlink" title="实现一个简易的WSGI"></a>实现一个简易的WSGI</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tool</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_http_request</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HTTP_VERSION = <span class="string">"HTTP/1.1"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WSGIServer</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Client</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, socket, addr, application)</span>:</span></span><br><span class="line">            self.socket = socket</span><br><span class="line">            self.addr = addr</span><br><span class="line">            self.application = application</span><br><span class="line">            self.response_headers = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理请求</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, client)</span>:</span></span><br><span class="line">            <span class="comment"># 从socket获取数据</span></span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">                data = client.recv(<span class="number">2048</span>)</span><br><span class="line">                environ = self.parse_request(data)</span><br><span class="line">                result = self.application(environ, self.start_response)</span><br><span class="line">                self.return_response(result)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 解析请求头</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">parse_request</span><span class="params">(self, data)</span>:</span></span><br><span class="line">            data = str(data, encoding=<span class="string">"utf8"</span>)</span><br><span class="line">            head = &#123;&#125;</span><br><span class="line">            <span class="comment"># 解析请求行</span></span><br><span class="line">            request_line = data.splitlines()[<span class="number">0</span>].split(<span class="string">" "</span>)</span><br><span class="line">            head[<span class="string">"HTTP_Method"</span>] = request_line[<span class="number">0</span>]</span><br><span class="line">            head[<span class="string">"HTTP_Path"</span>] = request_line[<span class="number">1</span>]</span><br><span class="line">            head[<span class="string">"HTTP_Version"</span>] = request_line[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 解析请求首部</span></span><br><span class="line">            request_header = data.splitlines()[<span class="number">1</span>:]</span><br><span class="line">            <span class="keyword">for</span> one <span class="keyword">in</span> request_header:</span><br><span class="line">                tmp = one.split(<span class="string">": "</span>)</span><br><span class="line">                <span class="keyword">if</span> len(tmp) == <span class="number">2</span>:</span><br><span class="line">                    head[tmp[<span class="number">0</span>]] = tmp[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">start_response</span><span class="params">(self, status, response_headers)</span>:</span></span><br><span class="line">            <span class="comment"># 固定响应头信息</span></span><br><span class="line">            server_headers = [</span><br><span class="line">                (<span class="string">'Server'</span>, <span class="string">'WSGIServer-Tan 0.1'</span>),</span><br><span class="line">            ]</span><br><span class="line">            self.response_status = status</span><br><span class="line">            self.response_headers = response_headers + server_headers</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">return_response</span><span class="params">(self, result)</span>:</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.response_headers += [(<span class="string">'Date'</span>, datetime.datetime.now().strftime(<span class="string">'%a, %d %b %Y %H:%M:%S GMT'</span>))]</span><br><span class="line">                self.response_headers += [(<span class="string">'Content-Length'</span>, str(len(bytes(result, encoding=<span class="string">"utf8"</span>))))]</span><br><span class="line"></span><br><span class="line">                response = <span class="string">'HTTP/1.1 &#123;status&#125;\r\n'</span>.format(status=self.response_status)</span><br><span class="line">                <span class="keyword">for</span> header <span class="keyword">in</span> self.response_headers:</span><br><span class="line">                    response += <span class="string">'&#123;0&#125;: &#123;1&#125;\r\n'</span>.format(*header)</span><br><span class="line"></span><br><span class="line">                response += <span class="string">'\r\n'</span></span><br><span class="line">                <span class="keyword">for</span> data <span class="keyword">in</span> result:</span><br><span class="line">                    response += data</span><br><span class="line">                self.socket.sendall(bytes(response, encoding=<span class="string">"utf8"</span>))</span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                <span class="comment"># self.socket.close()</span></span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, addr, port, application)</span>:</span></span><br><span class="line">        self.application = application</span><br><span class="line">        self.addr = addr</span><br><span class="line">        self.port = port</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">import</span> socket</span><br><span class="line">        <span class="comment"># 1.创建socket</span></span><br><span class="line">        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2.绑定端口</span></span><br><span class="line">        self.server_socket.bind((self.addr, self.port))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3.监听端口</span></span><br><span class="line">        self.server_socket.listen()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 单线程版</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            socket, addr = self.server_socket.accept()</span><br><span class="line">            print(datetime.datetime.now())</span><br><span class="line">            client = WSGIServer.Client(socket, addr, self.application)</span><br><span class="line">            client.process_request(socket)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    <span class="comment"># sleep(5)</span></span><br><span class="line">    start_response(<span class="string">"200 OK"</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/plain; charset=utf-8'</span>)])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"&lt;h1&gt;Hello,World&lt;/h1&gt;"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    wsgi = WSGIServer(<span class="string">""</span>, <span class="number">8000</span>, application)</span><br><span class="line">    wsgi.run()</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>application 返回的必须是一个可迭代的对象</p>]]></content>
      
      
      <categories>
          
          <category> NetworkDev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络开发系列 </tag>
            
            <tag> Python </tag>
            
            <tag> WSGI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git教程</title>
      <link href="/2019/11/20/GitTutorial/"/>
      <url>/2019/11/20/GitTutorial/</url>
      
        <content type="html"><![CDATA[<h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><p>git config –global user.name “yourname”<br>git config –global user.email “<a href="mailto:youremail@domain.com" target="_blank" rel="noopener">youremail@domain.com</a>“</p><p>config的三个作用域</p><ul><li>–global</li><li>–local</li><li>–system<br>使用 <code>git config --list --global</code> 可以查看作用范围</li></ul><p>注意:若设置了local,则当前仓库使用local的设置,否则使用global的设置</p><h2 id="建立Git仓库"><a href="#建立Git仓库" class="headerlink" title="建立Git仓库"></a>建立Git仓库</h2><ol><li>已有项目代码纳入Git管理<br><code>git init</code></li><li>新建的项目直接用Git管理<br><code>git init your_project</code><br>注意:这样会新建一个your_project的目录</li></ol><p><code>git add -u</code><br>把所有之前已经add的文件的更改add到暂存区</p><h3 id="先有本地仓库再创建远程仓库"><a href="#先有本地仓库再创建远程仓库" class="headerlink" title="先有本地仓库再创建远程仓库"></a>先有本地仓库再创建远程仓库</h3><p>需要在首次pull 的时候,使用<br><code>git pull origin master --allow-unrelated-histories</code><br>其中origin是要pull的源，master是要pull的分支</p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 版本管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计网试验一:搭建HTTP代理服务器</title>
      <link href="/2019/10/13/NetWork-Exp-1-HTTPProxy/"/>
      <url>/2019/10/13/NetWork-Exp-1-HTTPProxy/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机网络试验一-搭建HTTP代理服务器"><a href="#计算机网络试验一-搭建HTTP代理服务器" class="headerlink" title="计算机网络试验一: 搭建HTTP代理服务器"></a>计算机网络试验一: 搭建HTTP代理服务器</h2><p>使用Java语言实现</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><ol><li>开启一个Socket, bind 并 listen一个端口</li><li>当客户端连接到这个端口的时候,获得连接的TCP Socket,并新创建一个线程处理这个Socket<ol><li>接收到来着客户端的请求信息request</li><li>从request中解析出method,ip,port,等信息</li><li>判断解析出的协议是否支持, 页面是否有缓存</li><li>代理服务器连接客户端要访问的目标页面所在的服务器,将request发送过去</li><li>代理服务器接收目标服务器的响应response</li><li>代理服务器将response发给客户端</li><li>关闭socket</li></ol></li></ol><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><ol><li>设置浏览器代理为服务器对应的IP和port即可</li></ol><h2 id="完成度"><a href="#完成度" class="headerlink" title="完成度"></a>完成度</h2><ul><li><p>[x] HTTP代理</p></li><li><p>[ ] 缓存</p></li><li><p>[ ] 网站限制</p></li></ul><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ol><li><p>使用Java的BufferedReader对象的readline()函数来读取服务器响应的内容时,会卡在最后一行,等1.3min后才返回内容</p><p><strong>原因</strong>: </p><p>​    readline()函数是根据换行符来读取的,若响应数据的最后一行没有换行符,则BufferedReader会一直阻塞,直到连接超时被Close掉,readLine才会返回数据.</p><p><strong>解决方案:</strong></p><p>​    1. 是</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 计网试验 </tag>
            
            <tag> HTTP </tag>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git多账号使用</title>
      <link href="/2019/09/04/manyGitAccount/"/>
      <url>/2019/09/04/manyGitAccount/</url>
      
        <content type="html"><![CDATA[<h1 id="同一台设备同时使用多个Git账号"><a href="#同一台设备同时使用多个Git账号" class="headerlink" title="同一台设备同时使用多个Git账号"></a>同一台设备同时使用多个Git账号</h1><h2 id="1-生成多个账号的RSA"><a href="#1-生成多个账号的RSA" class="headerlink" title="1.生成多个账号的RSA"></a>1.生成多个账号的RSA</h2><p>ssh-keygen -t rsa -C “your email”</p><p>回车设置不同的名字.</p><p>生成后将公钥加入到不同的github账号里</p><h2 id="2-添加ssh配置文件"><a href="#2-添加ssh配置文件" class="headerlink" title="2.添加ssh配置文件"></a>2.添加ssh配置文件</h2><p>在C:\Users\Administrator\.ssh 目录下新建名为config的文件,文件内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line"> HostName github.com</span><br><span class="line"> User MrTjming</span><br><span class="line"> IdentityFile C:/Users/Administrator/.ssh/id_rsa</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Host qq</span><br><span class="line">HostName github.com</span><br><span class="line">    UserJemy-Tan</span><br><span class="line">    IdentityFileC:/Users/Administrator/.ssh/id_rsa_qq</span><br></pre></td></tr></table></figure><p>其中Host 可自定义,用于区分即可 </p><h2 id="3-切换git的账号"><a href="#3-切换git的账号" class="headerlink" title="3.切换git的账号"></a>3.切换git的账号</h2><p>查看用户名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br></pre></td></tr></table></figure><p>查看用户邮箱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>修改用户名和邮箱的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Your_username&quot;</span><br><span class="line">git config --global user.email &quot;Your_email&quot;</span><br></pre></td></tr></table></figure><h2 id="4-切换"><a href="#4-切换" class="headerlink" title="4.切换"></a>4.切换</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改origin url</span></span><br><span class="line">git remote rm origin</span><br><span class="line"><span class="comment"># 注意：下面的qq是第二步设置的Host</span></span><br><span class="line">git remote add origin git@qq:&lt;username&gt;/&lt;repo-name&gt;.git</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot学习笔记</title>
      <link href="/2019/01/18/SpringBoot/"/>
      <url>/2019/01/18/SpringBoot/</url>
      
        <content type="html"><![CDATA[<h1 id="碰到的问题"><a href="#碰到的问题" class="headerlink" title="碰到的问题"></a>碰到的问题</h1><h2 id="1-新建项目不能run"><a href="#1-新建项目不能run" class="headerlink" title="1.新建项目不能run"></a>1.新建项目不能run</h2><p>使用Maven的install</p><h2 id="2-run起来的项目404"><a href="#2-run起来的项目404" class="headerlink" title="2.run起来的项目404"></a>2.run起来的项目404</h2><p>解决方案: </p><ol><li>controller类必须在SpringApplication同目录或其子目录下</li><li>添加组件的基础包扫描</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Sping Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在CentOS上部署Django项目</title>
      <link href="/2018/12/22/deployDjangoInCentOS/"/>
      <url>/2018/12/22/deployDjangoInCentOS/</url>
      
        <content type="html"><![CDATA[<h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><ul><li>CentOS 7.5</li><li>Python 3.6</li><li>Django 1.11.x</li></ul><h1 id="部署流程"><a href="#部署流程" class="headerlink" title="部署流程"></a>部署流程</h1><p>##　安装Python3 并与Python2并存<br>使用<code>which python</code>查看python位置,cd进入该位置<br>使用<code>mv python python.bak</code>备份<br>执行安装相关依赖<br><code>yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make</code> </p><p>下载Python编译安装包 <code>wget https://www.python.org/ftp/python/3.6.6/Python-3.6.6.tar.xz</code><br>解压 <code>tar -xvJf  Python-3.6.6.tar.xz</code><br>切换进入解压后的目录 <code>cd Python-3.6.6</code><br>编译安装<code>./configure prefix=/usr/local/python3</code><br><code>make &amp;&amp; make install</code></p><p>添加软连接<br><code>ln -s /usr/local/python3/bin/python3 /usr/bin/python3</code><br><code>ln -s /usr/local/python3/bin/pip3 /usr/bin/pip</code><br><strong>注意</strong>:以下步骤可选(若想使用python命令执行pyhton3,则进行一下配置)</p><p>因为执行yum需要python2版本，所以我们还要修改yum的配置，执行：<br><code>vi /usr/bin/yum</code><br>把<code>#! /usr/bin/python</code><br>修改为<code>#! /usr/bin/python2</code></p><p>同理 <code>vi /usr/libexec/urlgrabber-ext-down</code><br>把<code>#! /usr/bin/python</code><br>修改为<code>#! /usr/bin/python2</code></p><h2 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h2><p>参考<a href="https://www.cnblogs.com/silentdoer/articles/7258232.html" target="_blank" rel="noopener">这里</a></p><p>下载mysql的repo源 这里安装的mysql5.7<br><code>cd /usr/local/src/</code><br><code>wget http://repo.mysql.com/mysql57-community-release-el7-8.noarch.rpm</code><br><code>rpm -ivh mysql57-community-release-el7-8.noarch.rpm</code><br><code>yum --installroot=/usr/local/mysql --releasever=/ -y install mysql-server</code></p><p> 启动mysql服务<br><code>service mysqld restart</code><br> 重置密码<br> 在日志文件里找到密码<br> 执行<code>grep &quot;password&quot; /var/log/mysqld.log</code><br>出现如下结果<br>2018-12-22T13:21:07.714669Z 1 [Note] A temporary password is generated for root@localhost: <strong>U%wng8tKEUf5</strong><br>加粗部分为初始密码<br><code>mysql -uroot -p</code> 输入密码<br>用该密码登录到服务端后，必须马上修改密码再执行一些数据库操作，不然会报如下错误：</p><p>mysql&gt; select @@log_error;<br>ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.<br>mysql&gt;<br>修改密码（注意，登录后的操作后面都最好要有;结尾）</p><p>ALTER USER ‘root‘@’localhost’ IDENTIFIED BY ‘root123’;</p><h2 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django1.11连接Mysql的问题-Python3安装mysqlclient</title>
      <link href="/2018/10/25/djangoConnectMysql/"/>
      <url>/2018/10/25/djangoConnectMysql/</url>
      
        <content type="html"><![CDATA[<p>Django连接Mysql需要安装mysqlclient或Mysql-Python<br>直接pip install mysqlclient 可能会出现安装失败<br>进入[url]:<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysqlclient" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysqlclient</a> 找到对应版本的mysqlclient(如mysqlclient‑1.3.13‑cp36‑cp36m‑win_amd64.whl) 将其下载至本地<br>cmd进入刚刚下载的文件的地址,执行<br><code>pip install wheel mysqlclient-1.3.13-cp36-cp36m-win_amd64.whl</code><br>(注意替换下载的文件名)<br>即可安装成功</p>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 8.0修改Root账号的加密模式</title>
      <link href="/2018/10/25/mysql80ChangePwdType/"/>
      <url>/2018/10/25/mysql80ChangePwdType/</url>
      
        <content type="html"><![CDATA[<h2 id="1-登录mysql，连接用户为root。"><a href="#1-登录mysql，连接用户为root。" class="headerlink" title="1.登录mysql，连接用户为root。"></a>1.登录mysql，连接用户为root。</h2><p><code>mysql -u root -p</code></p><h2 id="2-执行命令查看加密方式"><a href="#2-执行命令查看加密方式" class="headerlink" title="2.执行命令查看加密方式"></a>2.执行命令查看加密方式</h2><p><code>use mysql;</code><br><code>select user,plugin from user where user=‘root’;</code></p><h2 id="3-执行命令修改加密方式"><a href="#3-执行命令修改加密方式" class="headerlink" title="3.执行命令修改加密方式"></a>3.执行命令修改加密方式</h2><p><code>alter user ‘root’@‘localhost’ identified with mysql_native_password by ‘yourpassword’</code></p><h2 id="4-属性权限使配置生效"><a href="#4-属性权限使配置生效" class="headerlink" title="4.属性权限使配置生效"></a>4.属性权限使配置生效</h2><p><code>flush privileges</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人网盘nextClould部署</title>
      <link href="/2018/10/21/nextClouldInstall/"/>
      <url>/2018/10/21/nextClouldInstall/</url>
      
        <content type="html"><![CDATA[<h2 id="一、-安装Apache2"><a href="#一、-安装Apache2" class="headerlink" title="一、 安装Apache2"></a>一、 安装Apache2</h2><p><code>sudo apt-get install apache2</code><br>安装完成后，浏览器访问:<a href="http://ipAddr/" target="_blank" rel="noopener">http://ipAddr/</a> 出现It works!网页表示安装成功。</p><p>修改状态：<code>service apache2 status|start|stop|restart</code><br>站点目录：/var/www/<br>修改权限：sudo chmod 777 /var/www<br>安装目录：/etc/apache2/<br>全局配置：/etc/apache2/apache2.conf<br>监听端口：/etc/apache2/ports.conf<br>虚拟主机：/etc/apache2/sites-enabled/000-default.conf</p><h2 id="二、安装MariaDB"><a href="#二、安装MariaDB" class="headerlink" title="二、安装MariaDB"></a>二、安装MariaDB</h2><p><code>sudo apt-get install mariadb-server mariadb-client</code><br>启动MariaDB服务：<code>sudo systemctl start mysql</code><br>查看状态：<code>sudo systemctl status mysql</code><br>重启服务：<code>service mysql restart</code><br>查看监听端口的情况：<code>netstat -tunpl</code> 或 <code>netstat -tap</code><br>执行初始化安全脚本，默认root密码为空，设置root密码和其他选项：<code>sudo mysql_secure_installation</code><br>为NextCloud创建数据库和用户<br>创建数据库nextcloud，用户名nextcloud，密码XXXXXXXX</p><p><code>sudo mysql -u root -p</code><br>进入MariaDB后，执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#创建数据库，名为：nextcloud</span><br><span class="line">CREATE DATABASE nextcloud;</span><br><span class="line"></span><br><span class="line">GRANT ALL PRIVILEGES ON nextcloud.* TO &apos;nextcloud&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;XXXXXXXX&apos;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">#退出</span><br><span class="line">\q</span><br></pre></td></tr></table></figure></p><h2 id="三、安装PHP及其他模块"><a href="#三、安装PHP及其他模块" class="headerlink" title="三、安装PHP及其他模块"></a>三、安装PHP及其他模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install php7.2</span><br><span class="line"></span><br><span class="line">sudo apt-get install apache2 mariadb-server libapache2-mod-php7.2</span><br><span class="line">sudo apt-get install php7.2-gd php7.2-json php7.2-mysql php7.2-curl php7.2-mbstring</span><br><span class="line">sudo apt-get install php7.2-intl php7.2-mcrypt php-imagick php7.2-xml php7.2-zip</span><br></pre></td></tr></table></figure><p>测试：<code>php7.2 -v</code><br>重启服务：<code>service apache2 restart</code><br>测试Apache能否解析PHP<br>执行<code>sudo nano /var/www/html/phpinfo.php</code><br>文件中写：&lt;?php echo phpinfo();?&gt;<br>浏览器访问:<a href="http://ipAddr/phpinfo.php" target="_blank" rel="noopener">http://ipAddr/phpinfo.php</a>  出现PHP Version网页</p><h2 id="四、安装phpMyAdmin"><a href="#四、安装phpMyAdmin" class="headerlink" title="四、安装phpMyAdmin"></a>四、安装phpMyAdmin</h2><p><code>sudo apt-get install phpmyadmin</code><br>安装：选择apache2，点击确定。下一步选择是要配置数据库，并输入密码。<br>创建phpMyAdmin快捷方式：<code>sudo ln -s /usr/share/phpmyadmin /var/www/html</code><br>启用Apache mod_rewrite模块：<code>sudo a2enmod rewrite</code><br>重启服务：<code>service php7.2-fpm restart &amp; service apache2 restart</code><br>测试：浏览器访问:<a href="http://ipAddr/phpmyadmin" target="_blank" rel="noopener">http://ipAddr/phpmyadmin</a></p><h2 id="五、配置Apache"><a href="#五、配置Apache" class="headerlink" title="五、配置Apache"></a>五、配置Apache</h2><p><code>nano /etc/apache2/apache2.conf</code><br>在最后面添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .php .htm .html</span><br><span class="line">AddDefaultCharset UTF-8</span><br></pre></td></tr></table></figure></p><p>然后重启Apache服务。<br>　　到此为止，web站点其实已经搭建起来了，只需在/var/www/html目录下存放网页文件，电脑主机就可以访问服务器了，<a href="http://ip/xxx.html" target="_blank" rel="noopener">http://ip/xxx.html</a></p><h2 id="六、下载nextcloud"><a href="#六、下载nextcloud" class="headerlink" title="六、下载nextcloud"></a>六、下载nextcloud</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /var/www/html</span><br><span class="line">wget https://download.nextcloud.com/server/releases/nextcloud-13.0.5.zip</span><br><span class="line">unzip nextcloud-13.0.5.zip</span><br><span class="line">rm nextcloud-13.0.5.zip</span><br></pre></td></tr></table></figure><p>接下来只需要在电脑主机的浏览器上输入:<a href="http://ip/nextcloud" target="_blank" rel="noopener">http://ip/nextcloud</a> 就可以正常访问了。</p><h2 id="七、可能遇到的问题"><a href="#七、可能遇到的问题" class="headerlink" title="七、可能遇到的问题"></a>七、可能遇到的问题</h2><p>1.缺少权限<br>如果出现下面的画面，说明你没有给nextcloud目录权限：</p><p>缺少权限</p><p>解决方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /var/www/html</span><br><span class="line">chown www-data nextcloud -Rf</span><br><span class="line">chmod 770 nextcloud -Rf</span><br></pre></td></tr></table></figure></p><p>2.刷新浏览器出现：<br>PHP cURL模块未安装<br>解决方法：</p><p><code>sudo apt-get install libcurl3 php7.2-curl</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> nextClould </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop简单使用</title>
      <link href="/2018/10/20/Hadoop/"/>
      <url>/2018/10/20/Hadoop/</url>
      
        <content type="html"><![CDATA[<h1 id="一-环境安装与配置"><a href="#一-环境安装与配置" class="headerlink" title="一.环境安装与配置"></a>一.环境安装与配置</h1><ol><li>安装VM虚拟机</li><li>在VM虚拟机里安装Ubuntu server版本,本教程使用ubuntu 18.10 server</li><li>启用root用户  </li></ol><p>装完Ubuntu后进入,用新用户登录,并执行命令<code>sudo passwd root</code> 设置root用户密码.<br>执行<code>logout</code>注销当前用户,用root账户登录</p><ol start="4"><li>关闭防火墙</li></ol><p><code>ufw diable</code></p><ol start="5"><li>卸载iptables组件</li></ol><p><code>apt-get remove iptables</code></p><ol start="6"><li>下载安装VIM</li></ol><p><code>apt-get install vim</code></p><h1 id="二-SSH连接配置"><a href="#二-SSH连接配置" class="headerlink" title="二.SSH连接配置"></a>二.SSH连接配置</h1><p>Linux远程连接需求:<br>1.Linux有ssh服务<br>2.需要使用SSH客户端工具</p><ol><li>安装SSH工具</li></ol><p><code>apt-get install openssh-server</code></p><ol start="2"><li>启动SSH服务</li></ol><p><code>/etc/init.d/ssh /start</code><br>注意:查看进程是否启动指定服务<code>ps -e | grep sshd</code></p><ol start="3"><li>设置允许root登录</li></ol><p><code>vim /etc/ssh/sshd_config</code><br>找到PermitRootLogin 将其值设为yes<br><code>PermitRootLogin yes</code><br>执行<code>sudo service ssh restart</code>重启服务</p><ol start="4"><li>使用SSH连接工具连接</li></ol><p><code>ifconfig</code> 查看当前IP<br>使用SecureCRT或Putty连接</p><h1 id="三-配置FTP服务"><a href="#三-配置FTP服务" class="headerlink" title="三.配置FTP服务"></a>三.配置FTP服务</h1><p>使用FTP方便文件互相传输</p><ol><li>安装vsftpd服务组件</li></ol><p><code>apt-get install vsftpd</code></p><ol start="2"><li>修改ftp用户的密码</li></ol><p>上述安装完成后,最自动为系统创建一个叫ftp的用户<br><code>passwd ftp</code></p><ol start="3"><li>设置ftp目录的权限</li></ol><p>vsftpd安装完成后,会自动创建一个/srv/ftp的目录<br><code>cd /srv/ftp</code><br><code>chmod 777 /srv/ftp</code></p><ol start="4"><li>修改配置文件</li></ol><p><code>vim /etc/vsftpd.conf</code><br>    0)设置允许写的权限<br>        write_enable=YES<br>    1)设置不允许匿名登录<br>        anonymous_enable=NO<br>    2)允许本地用户登录<br>        local_enable=YES<br>    3)是否将所有用户的限制在主目录<br>        chroot_local_user=YES<br>    4)是否启动限制用户名单<br>        chroot_list_enable=YES<br>    5)定义名单设置的目录(方便管理大的账号列表)<br>        chroot_list_file=/etc/vsftpd.chroot_list<br>    6)增加服务配置<br>        pam_service_name=vsftpd</p><ol start="5"><li>新建vsftpd.chroot_list文件</li></ol><p><code>vim /etc/vsftpd.chroot_list</code><br>在文件里写入访问的用户名ftp,保存退出</p><ol start="6"><li>修改/etc/pam.d/vsftpd</li></ol><p><code>vim /etc/pam.d/vsftpd</code><br>注释掉最后一行<br><code># auth  required        pam_shells.so</code></p><ol start="7"><li>启动vsftpd服务</li></ol><p><code>service vsftpd start</code><br>注意:重启 <code>service vsftpd restart</code></p><ol start="8"><li>客户端连接</li></ol><p>推荐FileZilla<br>IP地址:ifconfig查看<br>账号:ftp<br>密码是之前设置的<br>端口:21</p><h1 id="四-JDK的安装与配置"><a href="#四-JDK的安装与配置" class="headerlink" title="四.JDK的安装与配置"></a>四.JDK的安装与配置</h1><p>Hadoop本质是Java.</p><ol><li>下载JDK (下载for linux的.tar.gz)</li></ol><p>1)在官网下载,使用FTP上传<br>2)使用wget下载</p><ol start="2"><li>解压缩JDK</li></ol><p><code>tar xzvf jdk-name-***.tar.gz -C /usr/local</code><br>解压至-C后面的目录</p><ol start="3"><li>文件夹改名(可选)</li></ol><p>进入解压后的目录<br><code>cd /usr/local</code><br>将文件名改短<br><code>mv jdk***/ jdk</code></p><ol start="4"><li>配置环境文件</li></ol><p><code>vim /etc/profile</code><br>打开后进入最下面配置<br><code>export JAVA_HOME=/usr/local/jdk</code><br><code>export PATH=$PATH:$JAVA_HOME/bin:</code><br><code>export CLASS_PATH=$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</code></p><ol start="5"><li>使配置立即生效</li></ol><p><code>source /etc/profile</code></p><ol start="6"><li>测试JDK</li></ol><p>执行<code>java</code> 或 <code>javac</code> 看是否出错</p><h1 id="五-安装Hadoop"><a href="#五-安装Hadoop" class="headerlink" title="五.安装Hadoop"></a>五.安装Hadoop</h1><ol><li>下载Hadoop并用FTP上传</li></ol><p>在<a href="http://www.apache.org找到Hadoop下载" target="_blank" rel="noopener">www.apache.org找到Hadoop下载</a></p><ol start="2"><li>解压Hadoop</li></ol><p><code>tar xzvf hadoop***.tar.gz -C /usr/local</code></p><ol start="3"><li>重命名(可选)</li></ol><p>进入解压后的目录<br><code>cd /usr/local</code><br>将文件名改短<br><code>mv hadoop***/ hadoop</code></p><ol start="4"><li>配置环境文件</li></ol><p><code>vim /etc/profile</code><br>打开后进入最下面配置<br><code>export HADOOP_HOME=/usr/local/hadoop</code><br><code>export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME:/sbin:</code></p><ol start="5"><li>使配置立即生效</li></ol><p><code>source /etc/profile</code></p><ol start="6"><li>在hadoop的资源文件定义要使用的jdk</li></ol><p>路径 /usr/local/hadoop/etc/hadoop/hadoop-env.sh<br>修改下面的内容<br>export JAVA_HOME=/usr/local/jdk</p><ol start="7"><li>使用测试程序测序hadoop环境</li></ol><p>使用wordcount测试<br>在Hadoop目录下创建一个文件夹<br><code>mkdir input</code><br>编写一个文件<br><code>echo hello,world nice to meet you &gt; input/info.txt</code><br>执行wordcount统计单词数<br><code>hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.8.5.jar wordcount input/info.txt ouput/</code><br>注意:输出文件夹output必须不存在(<code>rm output/ -r</code> 可删除)</p><h2 id="配置SSH免密登录"><a href="#配置SSH免密登录" class="headerlink" title="配置SSH免密登录"></a>配置SSH免密登录</h2><p>密钥对分为公钥和私钥,其中公钥放在服务器,私钥放在要通过SSH连接服务器的本机.<br>公钥相当于锁,私钥相当于钥匙.</p><ol><li><p>生成密钥对<br><code>ssh-keygen</code><br>选择生成的密钥对储存的位置,默认(/root/.ssh/id_rsa)即可<br>选择是否对公钥对进行加密,若不加密,直接回车</p></li><li><p>安放公钥和私钥<br>id_rsa -私钥<br>id_rsa.pub -公钥</p></li><li><p>导入公钥<br>将生成的公钥导入到ssh的配置文件<br><code>cat /root/.ssh/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys</code></p></li><li><p>开启SSH登录<br>打开ssh配置文件<br><code>vim /etc/ssh/sshd_config</code> </p></li></ol><p>PubkeyAuthentication<br>默认注释,将no改为yes,取消注释即可开启ssh登录</p><ol start="5"><li>关闭密码登录<br>上述配置文件中<br>PasswordAuthentication<br>默认注释将yes改为no即可关闭密码登陆</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 8.0 Server Install Fail</title>
      <link href="/2018/10/20/mysql8Install/"/>
      <url>/2018/10/20/mysql8Install/</url>
      
        <content type="html"><![CDATA[<p>Mysql 8.0版本的server在全新安装的win10上不能正常安装，错误代码{29AEA9CC-3A6A-4F86-8A0E-AC8750F91B69}</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="一、安装运行库"><a href="#一、安装运行库" class="headerlink" title="一、安装运行库"></a>一、安装运行库</h3><p>安装Microsoft Visual C++ 2013 Redistributable X86<br>注意：网上说无论64还是32位系统都要安装32位版本的，但是在本机实测无效</p><h3 id="二、使用mysql-server压缩包直接安装"><a href="#二、使用mysql-server压缩包直接安装" class="headerlink" title="二、使用mysql server压缩包直接安装"></a>二、使用mysql server压缩包直接安装</h3><h4 id="1、删除出错的MySQL"><a href="#1、删除出错的MySQL" class="headerlink" title="1、删除出错的MySQL"></a>1、删除出错的MySQL</h4><p>执行命令:<br><code>mysqld --remove mysql</code><br><code>mysqld --remove mysql80</code></p><h4 id="2、初始化设置"><a href="#2、初始化设置" class="headerlink" title="2、初始化设置"></a>2、初始化设置</h4><p>执行命令：<br><code>mysqld --initialize-insecure --user=mysql</code></p><h4 id="3、创建服务"><a href="#3、创建服务" class="headerlink" title="3、创建服务"></a>3、创建服务</h4><p>执行命令：<br><code>mysqld --install mysql</code></p><h4 id="4、启动服务"><a href="#4、启动服务" class="headerlink" title="4、启动服务"></a>4、启动服务</h4><p>执行命令：<br><code>net start mysql</code></p><h4 id="5、登录mysql"><a href="#5、登录mysql" class="headerlink" title="5、登录mysql"></a>5、登录mysql</h4><p>执行命令：<br><code>mysql -uroot -p</code><br>注意：初始无密码，在密码框直接回车就行，若提示密码错误，添加skip-grant-table,修改密码</p><h4 id="6、设置密码"><a href="#6、设置密码" class="headerlink" title="6、设置密码"></a>6、设置密码</h4><p>执行命令：<br><code>alter user&#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;MyPass@123456&#39;;</code><br>注意：8.0版本密码中必需包含大小写字母、数字和字符</p><h4 id="7、设置远程连接密码"><a href="#7、设置远程连接密码" class="headerlink" title="7、设置远程连接密码"></a>7、设置远程连接密码</h4><p>执行命令：<br><code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;Pwd@1234&#39;;</code><br>注意：更改了mysql_native_passwd密码，等同更改用户原始密码。MYSQL 8.0 内以mysql-native_passwd为主</p><h4 id="8、刷新权限"><a href="#8、刷新权限" class="headerlink" title="8、刷新权限"></a>8、刷新权限</h4><p>执行命令：<br><code>flush privileges;</code></p><h4 id="9、使用Navicat连"><a href="#9、使用Navicat连" class="headerlink" title="9、使用Navicat连"></a>9、使用Navicat连</h4><p>Navicat下载地址：待补<br>连接设置：<br>主机：localhost<br>端口：3306<br>用户：root<br>密码：Pwd@1234 (远程连接密码)</p>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习</title>
      <link href="/2018/10/18/aboutLinux/"/>
      <url>/2018/10/18/aboutLinux/</url>
      
        <content type="html"><![CDATA[<h3 id="一些小知识"><a href="#一些小知识" class="headerlink" title="一些小知识"></a>一些小知识</h3><p>1.Linux各发行版使用相同的内核释放源（版本可能不一样）并且遵循一套Linux开发的规范，所以它们的区别主要在于包管理的不同<br>根据包管理主要可分为两大类</p><ul><li>RPM方式（Red Hat, Fedora, SuSE）</li><li>dpkg方式（Debian, Ubuntu）</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mediaCodingFormat</title>
      <link href="/2018/10/17/mediaCodingFormat/"/>
      <url>/2018/10/17/mediaCodingFormat/</url>
      
        <content type="html"><![CDATA[<p>挖坑 </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>有关DNS的解析及原理</title>
      <link href="/2018/10/16/aboutDNS/"/>
      <url>/2018/10/16/aboutDNS/</url>
      
        <content type="html"><![CDATA[<h2 id="一-什么是DNS"><a href="#一-什么是DNS" class="headerlink" title="一.什么是DNS"></a>一.什么是DNS</h2><p>DNS(Domain Name System)是一种作用于TCP/IP的网络的提供将主机名与域名转换为IP地址的服务的系统。可以通俗地理解为，DNS提供的服务就是将浏览器里输入的域名转化为其对应的IP地址。</p><h2 id="二-DNS服务器种类"><a href="#二-DNS服务器种类" class="headerlink" title="二.DNS服务器种类"></a>二.DNS服务器种类</h2><p>DNS服务器分为三种，分别对应从上到下的三级关系</p><h3 id="1-根DNS服务器"><a href="#1-根DNS服务器" class="headerlink" title="1.根DNS服务器"></a>1.根DNS服务器</h3><p>（一共13台）</p><h3 id="2-顶级DNS服务器"><a href="#2-顶级DNS服务器" class="headerlink" title="2.顶级DNS服务器"></a>2.顶级DNS服务器</h3><p>各顶级域名（如com,cn,us等）的服务器</p><h3 id="3-权威DNS服务器"><a href="#3-权威DNS服务器" class="headerlink" title="3.权威DNS服务器"></a>3.权威DNS服务器</h3><p>如comDNS服务器下对应着（baidu.com，google.com等DNS服务器）</p><h2 id="三-DNS解析的流程"><a href="#三-DNS解析的流程" class="headerlink" title="三.DNS解析的流程"></a>三.DNS解析的流程</h2><p>从用户发起访问请求开始，DNS解析可能会按顺序进行以下几个流程，直到在某一层中得到了想要的结果，则结束整个解析流程。<br>1.浏览器检查浏览器的缓存中是否有该域名对应的有效的IP地址（缓存中的内容有时间，大小等限制）。<br>2.操作系统检查本机中的hosts文件是否有该域名的映射关系。<br>3.操作系统检查本地DNS解析器的缓存是否有该域名的映射关系<br>4.操作系统访问本机TCP/IP中参数设置的DNS服务器获取相关解析信息。注意：这里填写的DNS服务器不是13台域名根服务器。本机请求这里的DNS服务器后，DNS服务器会查询其是否有该域名的解析信息或者缓存信息，有则返回<br>5-1-1.若DNS服务器没有该域名的解析信息且使用的非转发模式，则DNS服务器发送请求至13台跟域名服务器，根域名服务器会根据请求的域名返回一个负责该顶级域名解析服务的IP地址（以下简称为DNS1），本地DNS会将请求再发送到DNS1处<br>5-1-2.若DNS1中有该域名的解析信息则返回，否则返回该顶级域名的次级DNS服务器的IP地址（以下简称为DNS2），本地DNS再将请求发送至DNS2，重复该过程直到找到解析信息。<br>5-2-1.若DNS服务器没有该域名的解析信息且使用的是转发模式，则将请求转发至本地DNS服务器的上一级，重复该过程直到找到解析信息。<br>6.解析成功后，保存解析结果至缓存，以便下次直接使用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> DNS </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装Ubuntu的一些坑</title>
      <link href="/2018/10/13/ubuntuInstallInDoubleGpu/"/>
      <url>/2018/10/13/ubuntuInstallInDoubleGpu/</url>
      
        <content type="html"><![CDATA[<h2 id="一-在双显卡-N卡-核显-电脑上安装Ubuntu"><a href="#一-在双显卡-N卡-核显-电脑上安装Ubuntu" class="headerlink" title="一.在双显卡(N卡+核显)电脑上安装Ubuntu"></a>一.在双显卡(N卡+核显)电脑上安装Ubuntu</h2><h3 id="1-关闭Security-Boot"><a href="#1-关闭Security-Boot" class="headerlink" title="1.关闭Security Boot"></a>1.关闭Security Boot</h3><p>直接在BIOS界面关闭即可</p><h3 id="2-安装时禁用nouveau显卡"><a href="#2-安装时禁用nouveau显卡" class="headerlink" title="2.安装时禁用nouveau显卡"></a>2.安装时禁用nouveau显卡</h3><p>U盘引导启动grub时，在install ubuntu选项上按e，在quiet slash –后面添加acpi_osi=linux nomodeset,按F10引导启动，安装Ubuntu后及时装上显卡驱动     </p><h3 id="3-测试nvidia-驱动是否安装成功"><a href="#3-测试nvidia-驱动是否安装成功" class="headerlink" title="3.测试nvidia 驱动是否安装成功"></a>3.测试nvidia 驱动是否安装成功</h3><p>执行下面的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi   </span><br><span class="line">nvidia-settings</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对GitHub的项目自动部署</title>
      <link href="/2018/09/12/automateDeploymentInGithub/"/>
      <url>/2018/09/12/automateDeploymentInGithub/</url>
      
        <content type="html"><![CDATA[<h1 id="有关部署"><a href="#有关部署" class="headerlink" title="有关部署"></a>有关部署</h1><h2 id="什么是部署"><a href="#什么是部署" class="headerlink" title="什么是部署"></a>什么是部署</h2><p>要将一个项目的源代码运行起来需要可能需要对服务器进行各种设置，</p><h2 id="为什么要使用自动部署"><a href="#为什么要使用自动部署" class="headerlink" title="为什么要使用自动部署"></a>为什么要使用自动部署</h2><p>每次往GitHub更新代码的时候，我们都很难看到代码实际的工作效果。</p><p>## </p>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Hexo博客的搭建与使用</title>
      <link href="/2018/09/12/hexoBlog/"/>
      <url>/2018/09/12/hexoBlog/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo介绍"><a href="#Hexo介绍" class="headerlink" title="Hexo介绍"></a>Hexo介绍</h1><p>Hexo是一个基于Node.js的静态页面生成框架，可以轻松在GitHub Pages里部署博客。</p><h1 id="Hexo环境搭建"><a href="#Hexo环境搭建" class="headerlink" title="Hexo环境搭建"></a>Hexo环境搭建</h1><h2 id="Node-js的安装"><a href="#Node-js的安装" class="headerlink" title="Node.js的安装"></a>Node.js的安装</h2><p>直接在<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>的官网里找到适合自己系统的安装包安装即可。</p><h2 id="Git的安装"><a href="#Git的安装" class="headerlink" title="Git的安装"></a>Git的安装</h2><p>在<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>的官网里找到适应版本安装即可，安装后，将GitHub的ssh Key填入git的相关设置</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>安装Node.js后，在命令行里执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><h2 id="创建一个Blog"><a href="#创建一个Blog" class="headerlink" title="创建一个Blog"></a>创建一个Blog</h2><p>创建一个用于存放Blog的目录，在命令行里进入它，执行下面的语句<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder\&gt;  </span><br><span class="line"><span class="built_in">cd</span> &lt;folder\&gt;  </span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>其中\<folder>是你的Blog的项目名称</folder></p><h1 id="Hexo项目的一些文件-夹"><a href="#Hexo项目的一些文件-夹" class="headerlink" title="Hexo项目的一些文件(夹)"></a>Hexo项目的一些文件(夹)</h1><h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><p>在项目根目录下的_config.yml的是配置文件，在这个文件里有一些关于项目的设置</p><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>应用程序的信息</p><h2 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h2><p>这是模版文件夹。新建文章时，Hexo 会根据 scaffold 来建立对应的md文件。<br>Hexo的模板是指在新建的文章中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><h2 id="source"><a href="#source" class="headerlink" title="source"></a>source</h2><p>资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。</p><h2 id="public"><a href="#public" class="headerlink" title="public"></a>public</h2><p>Markdown 和 HTML 文件会被解析并放到 public 文件夹。</p><h2 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h2><p>用于存放主题文件，在_config.yml里可设置使用的主题</p><h1 id="如何写博文"><a href="#如何写博文" class="headerlink" title="如何写博文"></a>如何写博文</h1><h2 id="怎样新建一篇文章"><a href="#怎样新建一篇文章" class="headerlink" title="怎样新建一篇文章"></a>怎样新建一篇文章</h2><p>在命令行里进入项目的根目录，执行下面的语句</p><blockquote><p>hexo n &lt;passageName>  </p></blockquote><p>其中，passageName将被设置为新博文的md文件名及博文标题。<br>在/source/_posts/目录下找到刚刚新建的md文件，直接在该文件里编辑博文内容即可。  </p><h1 id="如何将本地博客部署在GitHub-Pages"><a href="#如何将本地博客部署在GitHub-Pages" class="headerlink" title="如何将本地博客部署在GitHub Pages"></a>如何将本地博客部署在GitHub Pages</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>在_config.yml里填写如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: http://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git #部署工具</span><br><span class="line">  repository: git@github.com:MrTjming/MrTjming.github.io.git #SSH链接</span><br><span class="line">  branch: master #分支</span><br></pre></td></tr></table></figure><h2 id="生成静态文件并推送至GitHub"><a href="#生成静态文件并推送至GitHub" class="headerlink" title="生成静态文件并推送至GitHub"></a>生成静态文件并推送至GitHub</h2><p>在Blog项目的根目录下执行如下代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g <span class="comment">#generate </span></span><br><span class="line">hexo d <span class="comment">#deploy</span></span><br></pre></td></tr></table></figure></p><p>即可将本地的Blog部署到GitHub</p>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开源协议</title>
      <link href="/2018/09/11/openSource/"/>
      <url>/2018/09/11/openSource/</url>
      
        <content type="html"><![CDATA[<h1 id="开源协议的定义"><a href="#开源协议的定义" class="headerlink" title="开源协议的定义"></a>开源协议的定义</h1><blockquote><p>开源许可是一种计算机软件和其他产品的许可类型，允许使用、修改或在定义的条款和条件下使用、修改或共享的源代码、蓝图和设计。这允许终端用户和商业公司对源代码、图纸或设计进行审查和修改，以满足自己的定制、好奇心或故障排除的需要。开源许可的软件大多是免费的，尽管这并不一定是必须的。许可证只允许非商业的重新分配或修改个人使用的源代码，通常不被认为是开源许可。然而,开源许可可能会有一些限制,尤其是对软件的起源的表达,比如要求保留作者的名字和代码中的版权声明,或要求重新分配授权软件只有在相同的许可(如copyleft许可证)。一组流行的开源软件许可证是由开源计划(OSI)根据其开源定义(OSD)批准的。          ——维基百科</p></blockquote><h1 id="为什么要使用协议"><a href="#为什么要使用协议" class="headerlink" title="为什么要使用协议"></a>为什么要使用协议</h1><p>代码一旦在互联网上公布后，可能被任何人看到并获取。有的人将网上公布的代码用于自己的开源软件，但是也有的会用于商业用途并可能带来一系列的问题。使用协议，可能保留你对公布的代码的一部分权利。你可以规定你公布的代码可以被哪些人用于哪些用途，并且说明他人使用你的代码导致的一切问题都与你无关。</p><h1 id="常见的开源协议"><a href="#常见的开源协议" class="headerlink" title="常见的开源协议"></a>常见的开源协议</h1><h2 id="BSD协议"><a href="#BSD协议" class="headerlink" title="BSD协议"></a>BSD协议</h2><h3 id="使用者权利："><a href="#使用者权利：" class="headerlink" title="使用者权利："></a>使用者权利：</h3><blockquote><p>1.可以自由使用和修改，修改后的代码可以用于开源软件甚至是专有软件的发布。<br>2.可更改协议</p></blockquote><h3 id="使用者义务："><a href="#使用者义务：" class="headerlink" title="使用者义务："></a>使用者义务：</h3><blockquote><p>1.发布产品的源代码中需要注明使用的开源代码是基于BSD协议的<br>2.发布产品中的二进制文件需要在文档中注明使用的开源代码是基于BSD协议的<br>3.不可用开源代码作者/机构的名字和开源作品的名字来做市场推广  </p></blockquote><h2 id="Apache-Licence"><a href="#Apache-Licence" class="headerlink" title="Apache Licence"></a>Apache Licence</h2><h3 id="使用者权利：-1"><a href="#使用者权利：-1" class="headerlink" title="使用者权利："></a>使用者权利：</h3><blockquote><p>1.可使用，复制，修改，合并，出版发行，发布，二次授权及贩卖软件或软件的副本<br>2.可更改协议</p></blockquote><h3 id="使用者义务：-1"><a href="#使用者义务：-1" class="headerlink" title="使用者义务："></a>使用者义务：</h3><blockquote><p>1.在软件及软件副本中需要包含版权申明和许可申明</p></blockquote><h2 id="MIT协议"><a href="#MIT协议" class="headerlink" title="MIT协议"></a>MIT协议</h2><h3 id="使用者权利：-2"><a href="#使用者权利：-2" class="headerlink" title="使用者权利："></a>使用者权利：</h3><blockquote><p>1.可使用，复制，修改，合并，出版发行，发布，二次授权及贩卖软件或软件的副本<br>2.可更改协议</p></blockquote><h3 id="使用者义务：-2"><a href="#使用者义务：-2" class="headerlink" title="使用者义务："></a>使用者义务：</h3><blockquote><p>1.在软件及软件副本中需要包含版权申明和许可申明</p></blockquote><h2 id="GPL协议"><a href="#GPL协议" class="headerlink" title="GPL协议"></a>GPL协议</h2><h3 id="使用者权利：-3"><a href="#使用者权利：-3" class="headerlink" title="使用者权利："></a>使用者权利：</h3><blockquote><p>1.可免费使用或修改开源代码</p></blockquote><h3 id="使用者义务：-3"><a href="#使用者义务：-3" class="headerlink" title="使用者义务："></a>使用者义务：</h3><blockquote><p>1.产品中使用了GPL协议的代码， 则该产品也必须使用GPL协议（传染性）<br>2.修改后的代码不能作为闭源的商业软件来发布和销售</p></blockquote><h2 id="LGPL协议"><a href="#LGPL协议" class="headerlink" title="LGPL协议"></a>LGPL协议</h2><h3 id="使用者权利：-4"><a href="#使用者权利：-4" class="headerlink" title="使用者权利："></a>使用者权利：</h3><blockquote><p>1.可免费使用或修改开源代码</p></blockquote><h3 id="使用者义务：-4"><a href="#使用者义务：-4" class="headerlink" title="使用者义务："></a>使用者义务：</h3><blockquote><p>1.产品中使用或修改了LGPL协议的代码， 则该部分代码也需使用LGPL协议<br>2.商业软件可使用或修改LGPL的协议</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP权威指南</title>
      <link href="/2018/09/08/HTTPTheDefinitiveGuide/"/>
      <url>/2018/09/08/HTTPTheDefinitiveGuide/</url>
      
        <content type="html"><![CDATA[<h1 id="书籍简介"><a href="#书籍简介" class="headerlink" title="书籍简介"></a>书籍简介</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><pre><code>超文本转移协议（Hypertext Transfer Protocol，HTTP）是在万维网上进行通信时所使用的协议方案。HTTP有很多应用，但最著名的是用于web浏览器和web服务器之间的双工通信。HTTP起初是一个简单的协议，因此你可能会认为关于这个协议没有太多好 说的。但现在，你手上拿着的是却一本两磅重 的书。如果你对我们怎么会写出一本650页 的关于HTTP的书感到奇怪的话，可以去看一下目录。本书不仅仅是一本HTTP首部的参考手册；它是一本名副其实的web结构圣经。本书中，我们尝试着将HTTP中一些互相关联且常被误解的规则梳理清楚，并编写了一系列基于各种主题的章节，对HTTP各方面的特性进行了介绍。纵观全书，我们对HTTP“为什么”这样做进行了详细的解释，而不仅仅停留在它是“怎么做”的。而且，为了节省大家寻找参考文献的时间，我们还对很多HTTP应用程序正常工作所必须的、重要的非HTTP技术进行了介绍。在组织得便于使用的附录中，可以找到按照字母排序的首部参考（这些首部构成了最常见的HTTP文本的基础）。我们希望这种概念性的设计有助于读者对HTTP的使用。本书是为所有希望理解HTTP以及Web底层结构的人编写的。软硬件工程师也可以将本书作为HTTP及相关web技术的条理清楚的参考书使用。系统架构师和网络管理员可以通过本书更好地了解如何设计、实现并管理复杂的网络架构。性能工程师和分析人员可以从高速缓存和性能优化的相关章节中获益。市场营销和咨询专家可以通过概念的介绍更好地理解web技术的前景。本书对一些常见的误解进行了说明，推荐了“各种使用诀窍”，提供了便捷的参考资料，并且对枯燥且令人费解的标准规范进行了可读性很强的介绍。在这本书里，我们对Web正常工作所必须且互相关联的技术进行了详细的介绍。本书是很多对因特网技术充满热情的人经过大量工作写成的。希望对你有所帮助。</code></pre><h2 id="阅读进度"><a href="#阅读进度" class="headerlink" title="阅读进度"></a>阅读进度</h2><pre><code>2018年8月开始阅读</code></pre><h1 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h1><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><h2 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h2>]]></content>
      
      
      <categories>
          
          <category> Books </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP权威指南 </tag>
            
            <tag> 书籍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Jekyll的使用</title>
      <link href="/2018/09/08/aboutJekyll/"/>
      <url>/2018/09/08/aboutJekyll/</url>
      
        <content type="html"><![CDATA[<h1 id="内容摘要"><a href="#内容摘要" class="headerlink" title="内容摘要"></a>内容摘要</h1><pre><code>经过一天的折腾，踩了各种坑之后，终于将这个基于Jekyll的博客运行起来了，特意在此记录一些安装过程中遇到的问题。</code></pre><h1 id="基础知识记录"><a href="#基础知识记录" class="headerlink" title="基础知识记录"></a>基础知识记录</h1><pre><code>Ruby是一种脚本语言，类似Python  Jekyll是一个框架，类似Django  Ruby与Jekyll的关系就类似于Python与Django  </code></pre><h1 id="搭建Jekyll博客"><a href="#搭建Jekyll博客" class="headerlink" title="搭建Jekyll博客"></a>搭建Jekyll博客</h1><pre><code>安装ruby(2.0.0以上，使用官网推荐的稳定版本)切换ruby的source来源 (可选，默认是国外源，可能下载不稳定)通过gem命令安装jekyll github上fork心仪的jekyll模板，本地jekyll serve(bundler exec jekyll serve)运行相应的博客注意：在Window下安装Ruby和Jekyll 有许多坑，安装Ruby时记得勾选安装DevKit-mingw</code></pre><h1 id="Jekyll的基础使用教程"><a href="#Jekyll的基础使用教程" class="headerlink" title="Jekyll的基础使用教程"></a>Jekyll的基础使用教程</h1><pre><code>在项目根目录下有一个_config.yml文件，这是Jekyll的配置文件，在里面可以修改各种配置在_posts目录下存放的是博客的文章（注意：由于windows下Jekyll的时区问题的缘故，使用+8区的当前时间发表的博文不会立即显示）</code></pre><h1 id="遇到的坑的总结"><a href="#遇到的坑的总结" class="headerlink" title="遇到的坑的总结"></a>遇到的坑的总结</h1><h2 id="安装Ruby时勾选安装-DevKit"><a href="#安装Ruby时勾选安装-DevKit" class="headerlink" title="安装Ruby时勾选安装(DevKit)"></a>安装Ruby时勾选安装(DevKit)</h2><h2 id="Jekyll插件的问题"><a href="#Jekyll插件的问题" class="headerlink" title="Jekyll插件的问题"></a>Jekyll插件的问题</h2><h3 id="Jekyll分页"><a href="#Jekyll分页" class="headerlink" title="Jekyll分页"></a>Jekyll分页</h3><pre><code>Jekyll提供的分页功能只能对所有文章进行分页，若要对不同分类的文章进行分页，需要使用一些第三方插件 参考(http://bamzc.top/2016/11/03/jekyll-paginate)  </code></pre><h3 id="Github-Pages对Jekyll插件的支持"><a href="#Github-Pages对Jekyll插件的支持" class="headerlink" title="Github Pages对Jekyll插件的支持"></a>Github Pages对Jekyll插件的支持</h3><pre><code>出于安全考虑，Github Pages限制了Jekyll的第三方插件的使用，只用极少数的插件被允许，若要对部署在GitHub Pages的博客系统达到使用第三方插件的功能，有如下两种比较简单易行的方案  </code></pre><h4 id="使用自动部署服务-如Travis"><a href="#使用自动部署服务-如Travis" class="headerlink" title="使用自动部署服务(如Travis)"></a>使用自动部署服务(如Travis)</h4><pre><code>参考[这里](https://stackoverflow.com/questions/28249255/how-do-i-configure-github-to-use-non-supported-jekyll-site-plugins/28252200#28252200)  </code></pre><h4 id="在本地编制作静态页面直接上传"><a href="#在本地编制作静态页面直接上传" class="headerlink" title="在本地编制作静态页面直接上传"></a>在本地编制作静态页面直接上传</h4><pre><code>在本地写作完后，使用Jekyll生成静态页面，直接将_site文件夹的内容上传至GitHub对应仓库  </code></pre>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jekyll </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
